import pytest
from calculator_credit import credit_calcuiator

@pytest.mark.parametrize("summ, percent, period, date, expected", [
    (20000, 20, 4, "2023-01-01", 
        {'2023-02-01': (20000.0, 5.0, 4, 5083.33), 
         '2023-03-04': (20000.0, 5.0, 4, 5062.5), 
         '2023-04-04': (20000.0, 5.0, 4, 5041.67), 
         '2023-05-05': (20000.0, 5.0, 4, 5020.83)
        }),
    (250000, 22.5, 16, "2020-07-01", 
        {'2022-08-01': (250000.0, 22.5, 16, 20312.5), 
         '2022-09-01': (250000.0, 22.5, 16, 20019.53),
         '2022-10-02': (250000.0, 22.5, 16, 19726.56), 
         '2022-11-02': (250000.0, 22.5, 16, 19433.59), 
         '2022-12-03': (250000.0, 22.5, 16, 19140.62), 
         '2023-01-03': (250000.0, 22.5, 16, 18847.66), 
         '2023-02-03': (250000.0, 22.5, 16, 18554.69),
         '2023-03-06': (250000.0, 22.5, 16, 18261.72), 
         '2023-04-06': (250000.0, 22.5, 16, 17968.75), 
         '2023-05-07': (250000.0, 22.5, 16, 17675.78), 
         '2023-06-07': (250000.0, 22.5, 16, 17382.81), 
         '2023-07-08': (250000.0, 22.5, 16, 17089.84), 
         '2023-08-08': (250000.0, 22.5, 16, 16796.88), 
         '2023-09-08': (250000.0, 22.5, 16, 16503.91), 
         '2023-10-09': (250000.0, 22.5, 16, 16210.94), 
         '2023-11-09': (250000.0, 22.5, 16, 15917.97)
        }),
    (30000000, 2, 36, "2024-08-03", 
        {'2024-09-03': (30000000.0, 2.0, 36, 883333.33), 
         '2024-10-04': (30000000.0, 2.0, 36, 881944.44), 
         '2024-11-04': (30000000.0, 2.0, 36, 880555.56), 
         '2024-12-05': (30000000.0, 2.0, 36, 879166.67), 
         '2025-01-05': (30000000.0, 2.0, 36, 877777.78), 
         '2025-02-05': (30000000.0, 2.0, 36, 876388.89), 
         '2025-03-08': (30000000.0, 2.0, 36, 875000.0), 
         '2025-04-08': (30000000.0, 2.0, 36, 873611.11), 
         '2025-05-09': (30000000.0, 2.0, 36, 872222.22), 
         '2025-06-09': (30000000.0, 2.0, 36, 870833.33), 
         '2025-07-10': (30000000.0, 2.0, 36, 869444.44), 
         '2025-08-10': (30000000.0, 2.0, 36, 868055.56), 
         '2025-09-10': (30000000.0, 2.0, 36, 866666.67), 
         '2025-10-11': (30000000.0, 2.0, 36, 865277.78), 
         '2025-11-11': (30000000.0, 2.0, 36, 863888.89), 
         '2025-12-12': (30000000.0, 2.0, 36, 862500.0), 
         '2026-01-12': (30000000.0, 2.0, 36, 861111.11), 
         '2026-02-12': (30000000.0, 2.0, 36, 859722.22), 
         '2026-03-15': (30000000.0, 2.0, 36, 858333.33), 
         '2026-04-15': (30000000.0, 2.0, 36, 856944.44), 
         '2026-05-16': (30000000.0, 2.0, 36, 855555.56), 
         '2026-06-16': (30000000.0, 2.0, 36, 854166.67), 
         '2026-07-17': (30000000.0, 2.0, 36, 852777.78), 
         '2026-08-17': (30000000.0, 2.0, 36, 851388.89), 
         '2026-09-17': (30000000.0, 2.0, 36, 850000.0), 
         '2026-10-18': (30000000.0, 2.0, 36, 848611.11), 
         '2026-11-18': (30000000.0, 2.0, 36, 847222.22), 
         '2026-12-19': (30000000.0, 2.0, 36, 845833.33), 
         '2027-01-19': (30000000.0, 2.0, 36, 844444.44), 
         '2027-02-19': (30000000.0, 2.0, 36, 843055.56), 
         '2027-03-22': (30000000.0, 2.0, 36, 841666.67), 
         '2027-04-22': (30000000.0, 2.0, 36, 840277.78), 
         '2027-05-23': (30000000.0, 2.0, 36, 838888.89), 
         '2027-06-23': (30000000.0, 2.0, 36, 837500.0), 
         '2027-07-24': (30000000.0, 2.0, 36, 836111.11), 
         '2027-08-24': (30000000.0, 2.0, 36, 834722.22)
        })
    ]
)
def test_loan_payoff_calculation(summ, percent, period, date, expected):
    assert loan_payoff_calculation(summ, percent, period, date) == expected



# --------Date
@pytest.mark.parametrize("summ, percent, period, date, expected_error", [
    (10000, 10, 12, True, "введите все в цифрах!"),
    (10000, 10, 12,  False, "введите все в цифрах!"),
    (10000, 10, 12, "", "введите все в цифрах!"),
    (10000, 10, 12, "two", "введите все в цифрах!"),
    (10000, 10, 12, -23, "введите все в цифрах!")
])
def test_date(summ, percent, period, date, expected_error):
    assert calculator_credit(summ, percent, period, date) == expected_error

    
# --------period
@pytest.mark.parametrize("summ, percent, period, date, expected_error", [
    (10000, 10, True, '2016-07-21', "введите все в цифрах!"),
    (10000, 10, False, '2016-07-21', "введите все в цифрах!"),
    (10000, 10, "", '2016-07-21', "введите все в цифрах!"),
    (10000, 10, "two", '2016-07-21', "введите все в цифрах!"),
    (10000, 10, -23, '2016-07-21', "введите все в цифрах!")
])
def test_period(summ, percent, period, date, expected_error):
    assert calculator_credit(summ, percent, period, date) == expected_error

    
# --------Summa
@pytest.mark.parametrize("summ, percent, period, date, expected_error", [
    (True, 10, 12, '2016-07-21', "введите все в цифрах!"),
    (False,10, 12, '2016-07-21', "введите все в цифрах!"),
    ("", 10, 12, '2016-07-21', "введите все в цифрах!"),
    ("two", 10, 12, '2016-07-21', "введите все в цифрах!"),
    (-100000, 10, 12, '2016-07-21', "введите все в цифрах!"),
    (0, 10, 12, '2016-07-21', "введите все в цифрах!")
])
def test_summ(summ, percent, period, date, expected_error):
    assert calculator_credit(summ, percent, period, date) == expected_error

    
# --------percent
@pytest.mark.parametrize("summ, percent, period, date, expected_error", [
    (10000, True, 12, '2016-07-21', "введите все в цифрах!"),
    (10000, False, 12, '2016-07-21', "введите все в цифрах!"),
    (10000, "", 12, '2016-07-21', "введите все в цифрах!"),
    (10000, "two", 12, '2016-07-21', "введите все в цифрах!"),
    (10000, -10, 12, '2016-07-21', "введите все в цифрах!")
])
def test_percent(summ, percent, period, date, expected_error):
    assert calculator_credit(summ, percent, period, date) == expected_error
    
    
    
    
    
    
